:toc: macro
toc::[]

= Service Layer

The service layer is responsible to expose functionality of the link:https://github.com/oasp/oasp4j/wiki/guide-logic-layer[logical layer] to external consumers over a network via xref:protocol[technical protocols].

== Types of Services

If you want to create a service please distinguish the following types of services:

* *External Services* +
are used for communication between different companies, vendors, or partners.
* *Internal Services* +
are used for communication between different applications in the same application landscape of the same vendor.
** *Back-end Services* +
are internal services between Java back-ends typically with different release and deployment cycles (otherwise if not Java consider this as external service).
** *JS-Client Services* +
are internal services provided by the Java back-end for JavaScript clients (GUI).
** *Java-Client Services* +
are internal services provided by the Java back-end for for a native Java client (JavaFx, EclipseRcp, etc.).

The choices for technology and protocols will depend on the type of service. Therefore the following table gives a guideline for aspects according to the service types. These aspects are described below.

.Aspects according to service-type
[options="header"]
|=======================
|*Aspect*                     |*External Service*|*Back-end Service*|*JS-Client Service*|*Java-Client Service*
|xref:versioning[*versioning*]|required          |required          |not required       |not required
|xref:interoperability[*interoperability*]|mandatory         |not required      |implicit           |not required
|xref:protocol[recommended *protocol*]|xref:soap[SOAP] or xref:rest[REST]|xref:rest[REST]|xref:rest[REST]+JSON|xref:rest[REST]
|=======================

== Versioning

For services consumed by other applications we use versioning to prevent incompatibilities between applications when deploying updates. This is done by the following conventions:

* We define a version number and prefixed with +v+ for version (e.g. +v1+).
* If we support previous versions we use that version numbers as part of the Java package defining the service API (e.g. +com.foo.application.component.service.api.v1+)
* We use the version number as part of the service name in the remote URL (e.g. +https://application.foo.com/services/rest/component/v1/resource+)
* Whenever we need to change the API of a service in an incompatible we increment the version (e.g. +v2+) as an isolated copy of the previous version of the service. In the implementation of different versions of the same service we can place compatibility code and delegate to the same unversioned use-case of the logic layer whenever possible.
* For maintenance and simplicity we avoid keeping more than one previous version.

== Interoperability

For services that are consumed by clients with different technology _interoperability_ is required. This is addressed by selecting the right xref:protocol[protocol] following protocol-specific best practices and following our considerations especially _simplicity_.

== Protocol

For services there are different protocols. Those relevant for and recommended by Devonfw are listed in the following sections with examples how to implement them in Java.

=== REST

REST is an inter-operable protocol that is more lightweight than SOAP.
However, it is no real standard and can cause confusion. Therefore we define best practices here to guide you.
For a general introduction consult the http://en.wikipedia.org/wiki/Representational_State_Transfer[wikipedia].
For CRUD operations in REST we distinguish between collection and element URIs:

* A collection URI is build from the rest service URI by appending the name of a collection. This is typically the name of an entity. Such URI identifies the entire collection of all elements of this type. Example:
[source,url]
----
https://mydomain.com/myapp/services/rest/mycomponent/v1/myentity
----
* An element URI is build from a collection URI by appending an element ID. It identifies a single element (entity) within the collection. Example:
[source,url]
----
https://mydomain.com/myapp/services/rest/mycomponent/v1/myentity/42
----

The "pure" REST architecture style is more suitable for creating "scalable" systems on the open web. But for usual business applications its complexity outweight its benefits, therefore the Devonfw proposes a more "pragmatic" approach to REST services.

On the next table we compare the main differences between the "canonical" REST approach (or RESTful) and the Devonfw proposal.

.Usage of HTTP methods
[options="header"]
|=======================
|*HTTP Method*|*RESTful Meaning*|*Devonfw*
|+GET+        .<|Read single element.

Search on an entity (with parametrized url) .<|Read a single element.

|+PUT+        .<|Replace entity data.

Replace entire collection (typically not supported) .<| Not used
|+POST+       .<|Create a new element in the collection  .<| Create or update an element in the collection.

Search on an entity (parametrized post body)

Bulk deletion.

|+DELETE+     .<|Delete an entity.

Delete an entiry collection (typically not supported) .<|Delete an entity.

Delete an entiry collection (typically not supported)|
|=======================

Please consider these guidelines and rationales:
* We use +POST+ on the collection URL for both create and update operations on an entity. This avoids pointless discussions in distinctions between +PUT+ and +POST+ and what to do if a "creation" contains an ID or if an "update" is missing the ID property.
* Hence, we do NOT use +PUT+ but always use +POST+ for write operations. As we always have a technical ID for each entity, we can simply distinguish create and update by the presence of the ID property.

==== JAX-RS

For implementing REST services we use the https://jax-rs-spec.java.net/[JAX-RS] standard. As an implementation we recommend http://cxf.apache.org/[CXF]. If you want to know more about why we have chosen these options see https://github.com/oasp/oasp4j/wiki/decision-service-framework[this].
For https://github.com/oasp/oasp4j/wiki/guide-json[JSON] bindings we use http://wiki.fasterxml.com/JacksonHome[Jackson] while https://github.com/oasp/oasp4j/wiki/guide-xml[XML] binding works out-of-the-box with http://www.oracle.com/technetwork/articles/javase/index-140168.html[JAXB].
To implement a service you simply write a regular class and use JAX-RS annotations to annotate methods that shall be exposed as REST operations. Here is a simple example:

[source,java]
--------
@Path("/tablemanagement")
@Named("TableManagementRestService")
public class TableManagementRestServiceImpl implements RestService {
  // ...
  @Produces(MediaType.APPLICATION_JSON)
  @GET
  @Path("/table/{id}/")
  @RolesAllowed(PermissionConstant.GET_TABLES)
  public TableBo getTable(@PathParam("id") String id) throws RestServiceException {

    Long idAsLong;
    if (id == null)
      throw new BadRequestException("missing id");
    try {
      idAsLong = Long.parseLong(id);
    } catch (NumberFormatException e) {
      throw new RestServiceException("id is not a number");
    } catch (NotFoundException e) {
      throw new RestServiceException("table not found");
    }
    return this.tableManagement.getTable(idAsLong);
  }
  // ...
}
--------
Here we can see a REST service for the https://github.com/oasp/oasp4j/wiki/architecture#business-architecture[business component] +tablemanagement+. The method _getTable_ can be accessed via HTTP GET (see _@GET_) under the URL path _tablemanagement/table/{id}_ (see _@Path_ annotations) where _{id}_ is the ID of the requested table and will be extracted from the URL and provided as parameter _id_ to the method _getTable_. It will return its result (_TableBo_) as JSON (see _@Produces_). As you can see it delegates to the https://github.com/oasp/oasp4j/wiki/guide-logic-layer[logic] component _tableManagement_ that contains the actual business logic while the service itself only contains mapping code and general input validation. Further you can see the _@RolesAllowed_ for https://github.com/oasp/oasp4j/wiki/guide-security[security]. The REST service implementation is a regular CDI bean that can use https://github.com/oasp/oasp4j/wiki/guide-dependency-injection[dependency injection].

NOTE: With JAX-RS it is important to make sure that each service method is annotated with the proper HTTP method (+@GET+,+@POST+,etc.) to avoid unnecessary debugging. So you should take care not to forget to specify one of these annotations.

===== JAX-RS Configuration

Starting from CXF 3.0.0 it is possible to enable the auto-discovery of JAX-RS roots and providers thus avoiding having to specify each service bean in the +beans-service.xml+ file.

When the jaxrs server is instantiated all the scanned root and provider beans (beans annotated with `javax.ws.rs.Path` and `javax.ws.rs.ext.Provider`) are configured. The xml configuration still allows us to specify the root path for all endpoints.

[source,xml]
--------
  <jaxrs:server id="CxfRestServices" address="/rest" />

--------

==== HTTP Status Codes

Further we define how to use the HTTP status codes for REST services properly. In general the 4xx codes correspond to an error on the client side and the 5xx codes to an error on the server side.

.Usage of HTTP status codes
[options="header"]
|=======================
|*HTTP Code*  |*Meaning*   |*Response*       |*Comment*
|200          |OK          |requested result |Result of successful GET
|204          |No Content  |_none_           |Result of successful POST, DELETE, or PUT (void return)
|400          |Bad Request |error details    |The HTTP request is invalid (parse error, validation failed)
|401          |Unauthorized|_none_ (security)|Authentication failed
|403          |Forbidden   |_none_ (security)|Authorization failed
|404          |Not found   |_none_           |Either the service URL is wrong or the requested resource does not exist
|500          |Server Error|error code, UUID |Internal server error occurred (used for all technical exceptions)
|=======================

For more details about REST service design please consult the http://restcookbook.com/[RESTful cookbook].

==== REST Exception Handling
For exceptions a service needs to have an exception facade that catches all exceptions and handles them by writing proper log messages and mapping them to a HTTP response with an according xref:http-status-codes[HTTP status code]. Therefore the OASP4J provides a generic solution via +RestServiceExceptionFacade+. You need to follow the https://github.com/oasp/oasp4j/wiki/guide-exceptions[exception guide] so that it works out of the box because the facade needs to be able to distinguish between business and technical exceptions.
You need to configure it in your +beans-service.xml+ as following:

[source,xml]
--------
  <jaxrs:server id="CxfRestServices" address="/rest">
    <jaxrs:providers>
      <bean class="io.oasp.module.rest.service.impl.RestServiceExceptionFacade"/>
      <!-- ... -->
    </jaxrs:providers>
    <!-- ... -->
  </jaxrs:server>
--------
Now your service may throw exceptions but the facade will automatically handle them for you.

==== Metadata

OASP4J has support for the following metadata in REST service invocations:

[options="header"]
|=======
|Name |Description| Further information
|Correlation ID |A unique identifier to associate different requests belonging to the same session / action| link:devonfw-logging-and-auditing[Logging guide]
|Validation errors |Standardized format for a service to communicate validation errors to the client| Server-side validation is documented in the link:https://github.com/oasp/oasp4j/wiki/guide-validation[Validation guide].

The protocol to communicate these validation errors to the client is discussed at https://github.com/oasp/oasp4j/issues/218
|Pagination |Standardized format for a service to offer paginated access to a list of entities| Server-side support for pagination is documented in the link:getting-started-Data-Access-Layer#pagination[Data-Access Layer Guide].
|=======

==== Recommendations for REST requests and responses

The OASP4J proposes, for simplicity, a deviation from the REST common pattern:

* Using +POST+ for updates (instead of +PUT+)
* Using the payload for addressing resources on POST (instead of identifier on the +URL+)
* Using parametrized +POST+ for searches

This use of REST will lead to simpler code both on client and on server. We discuss this use on the next points.

REST services are called via HTTP(S) URIs. As we mentioned at the beginning we distinguish between *collection* and *element* URIs:

* A collection URI is build from the rest service URI by appending the name of a collection. This is typically the name of an entity. Such URI identifies the entire collection of all elements of this type. Example:
----
    https://mydomain.com/myapp/services/rest/mycomponent/myentity
----
* An element URI is build from a collection URI by appending an element ID. It identifies a single element (entity) within the collection. Example:

----
    https://mydomain.com/myapp/services/rest/mycomponent/myentity/42
----
The following table specifies how to use the HTTP methods (verbs) for collection and element URIs properly (see http://en.wikipedia.org/wiki/Representational_State_Transfer#Applied_to_web_services[wikipedia]). For general design considerations beyond this documentation see the https://pages.apigee.com/web-api-design-ebook.html[API Design eBook].

===== Unparameterized loading of a single resource

* *HTTP Method*: +GET+
* *URL example*: +/products/123+

For loading of a single resource, embed the +identifier+ of the resource in the URL (for example +/products/123+).

The response contains the resource in JSON format, using a JSON object at the top-level, for example:

[source,javascript]
----
{
    "name": "Steak",
    "color": "brown"
}
----

===== Unparameterized loading of a collection of resources

* *HTTP Method*: +GET+
* *URL example*: +/products+

For loading of a collection of resources, make sure that the size of the collection can never exceed a reasonable maximum size. For parameterized loading (searching, pagination), see below.

The response contains the collection in JSON format, using a JSON object at the top-level, and the actual collection underneath a +result+ key, for example:

[source,javascript]
----
{
    "result": [
        {
            "name": "Steak",
            "color": "brown"
        },
        {
            "name": "Broccoli",
            "color": "green"
        }
    ]
}
----

Avoid returning JSON arrays at the top-level, to prevent CSRF attacks (see https://www.owasp.org/index.php/OWASP_AJAX_Security_Guidelines)

===== Saving a resource

* *HTTP Method*: +POST+
* *URL example*: +/products+

The resource will be passed via JSON in the request body. If updating an existing resource, include the resource's +identifier+ in the JSON and not in the URL, in order to avoid ambiguity.

If saving was successful, an empty HTTP 204 response is generated.

If saving was unsuccessful, refer below for the format to return errors to the client.


===== Parameterized loading of a resource

* *HTTP Method*: +POST+
* *URL example*: +/products/search+

In order to differentiate from an unparameterized load, a special _subpath_ (for example +search+) is introduced. The parameters are passed via JSON in the request body. An example of a simple, paginated search would be:

[source,javascript]
--------
{
    "status": "OPEN",
    "pagination": {
        "page": 2,
        "size": 25
    }
}
--------

The response contains the requested page of the collection in JSON format, using a JSON object at the top-level, the actual page underneath a +result+ key, and additional pagination information underneath a +pagination+ key, for example:

[source,javascript]
----
{
    "pagination": {
        "page": 2,
        "size": 25,
        "total": null
    },
    "result": [
        {
            "name": "Steak",
            "color": "brown"
        },
        {
            "name": "Broccoli",
            "color": "green"
        }
    ]
}
----


Compare the code needed on server side to accept this request:

[source,java]
----
@Path("/order")
 @POST
 public List<OrderCto> findOrders(OrderSearchCriteriaTo criteria) {
    return this.salesManagement.findOrderCtos(criteria);
 }
----

With the equivalent code required if doing it the REST way by issuing a +GET+ request:

[source,java]
----
  @Path("/order")
  @GET
  public List<OrderCto> findOrders(@Context UriInfo info) {

    RequestParameters parameters = RequestParameters.fromQuery(info);
    OrderSearchCriteriaTo criteria = new OrderSearchCriteriaTo();
    criteria.setTableId(parameters.get("tableId", Long.class, false));
    criteria.setState(parameters.get("state", OrderState.class, false));
    return this.salesManagement.findOrderCtos(criteria);
  }
----


====== Pagination details

The client can choose to request a count of the total size of the collection, for example to calculate the total number of available pages. It does so, by specifying the +pagination.total+ property with a value of +true+.

The service is free to honour this request. If it chooses to do so, it returns the total count as the +pagination.total+ property in the response.

===== Deletion of a resource

* *HTTP Method*: +DELETE+
* *URL example*: +/products/123+

For deletion of a single resource, embed the +identifier+ of the resource in the URL (for example +/products/123+).

===== Error results

The general format for returning an error to the client is as follows:

[source,javascript]
----
{
    "message": "A human-readable message describing the error",
    "code": "A code identifying the concrete error",
    "uuid": "An identifier (generally the correlation id) to help identify corresponding requests in logs"
}
----

If the error is caused by a failed validation of the entity, the above format is extended to also include the list of individual validation errors:

[source,javascript]
----
{
    "message": "A human-readable message describing the error",
    "code": "A code identifying the concrete error",
    "uuid": "An identifier (generally the correlation id) to help identify corresponding requests in logs",
    "errors": {
        "property failing validation": [
            "First error message on this property",
            "Second error message on this property"
        ],
        // ....
    }
}
----

==== REST Media Types

The payload of a REST service can be in any format as REST by itself does not specify this. The most established ones that the OASP4J recommends are https://github.com/oasp/oasp4j/wiki/guide-xml[XML] and https://github.com/oasp/oasp4j/wiki/guide-json[JSON]. Follow these links for further details and guidance how to use them properly. +JAX-RS+ and +CXF+ properly support these formats (+MediaType.APPLICATION_JSON+ and +MediaType.APPLICATION_XML+ can be specified for +@Produces+ or +@Consumes+). Try to decide for a single format for all services if possible and NEVER mix different formats in a service.

In order to use https://github.com/oasp/oasp4j/wiki/guide-json[JSON] via http://wiki.fasterxml.com/JacksonHome[Jackson] with http://cxf.apache.org/[CXF] you need to register the factory in your +beans-service.xml+ and make +CXF+ use it as following:

[source,xml]
--------
  <jaxrs:server id="CxfRestServices" address="/rest">
    <jaxrs:providers>
      <bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider">
        <property name="mapper">
          <ref bean="ObjectMapperFactory"/>
        </property>
      </bean>
      <!-- ... -->
    </jaxrs:providers>
    <!-- ... -->
  </jaxrs:server>

  <bean id="ObjectMapperFactory" factory-bean="RestaurantObjectMapperFactory" factory-method="createInstance"/>
--------

==== REST Testing

For testing REST services in general consult the https://github.com/oasp/oasp4j/wiki/guide-testing[testing guide].

For manual testing REST services there are browser plugins:

* Firefox: https://addons.mozilla.org/en-US/firefox/addon/httprequester/[httprequester] (or https://addons.mozilla.org/en-US/firefox/addon/poster/[poster])
* Chrome: http://www.getpostman.com/[postman] (https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo[advanced-rest-client])


=== SOAP

SOAP is a common protocol that is rather complex and heavy. It allows to build inter-operable and well specified services (see WSDL). SOAP is transport neutral what is not only an advantage. We strongly recommend to use HTTPS transport and ignore additional complex standards like WS-Security and use established HTTP-Standards such as RFC2617 (and RFC5280).

==== JAX-WS

For building web-services with Java we use the https://jcp.org/en/jsr/detail?id=224[JAX-WS] standard.
There are two approaches:

* code first
* contract first

Here is an example in case you define a code-first service.
We define a regular interface to define the API of the service and annotate it with JAX-WS annotations:
[source,java]
--------
@WebService
public interface TablemanagmentWebService {

  @WebMethod
  @WebResult(name = "message")
  TableEto getTable(@WebParam(name = "id") String id);

}
--------
And here is a simple implementation of the service:
[source,java]
--------
@Named("TablemanagementWebService")
@WebService(endpointInterface = "io.oasp.gastronomy.restaurant.tablemanagement.service.api.ws.TablemanagmentWebService")
public class TablemanagementWebServiceImpl implements TablemanagmentWebService {

  private Tablemanagement tableManagement;

  @Override
  public TableEto getTable(String id) {

    return this.tableManagement.findTable(id);
  }
--------
Finally we have to register our service implementation in the spring configuration file +beans-service.xml+:
[source,xml]
--------
  <jaxws:endpoint id="tableManagement" implementor="#TablemanagementWebService" address="/ws/Tablemanagement/v1_0"/>
--------

The +implementor+ attribute references an existing bean with the ID +TablemanagementWebService+ that corresponds to the +@Named+ annotation of our implementation (see https://github.com/oasp/oasp4j/wiki/guide-dependency-injection[dependency injection guide]). The +address+ attribute defines the URL path of the service.

==== SOAP Custom Mapping

In order to map custom https://github.com/oasp/oasp4j/wiki/guide-datatype[datatypes] or other types that do not follow the Java bean conventions, you need to write adapters for JAXB (see link:guide-xml[XML]).

==== SOAP Testing

For testing SOAP services in general consult the https://github.com/oasp/oasp4j/wiki/guide-testing[testing guide].

For testing SOAP services manually we strongly recommend http://www.soapui.org/[SoapUI].

== Service Considerations

The term _service_ is quite generic and therefore easily misunderstood. It is a unit exposing coherent functionality via a well-defined interface over a network. For the design of a service we consider the following aspects:

* *self-contained* +
The entire API of the service shall be self-contained and have no dependencies on other parts of the application (other services, implementations, etc.).
* *idem-potent* +
E.g. creation of the same master-data entity has no effect (no error)
* *loosely coupled* +
Service consumers have minimum knowledge and dependencies on the service provider.
* *normalized* +
complete, no redundancy, minimal
* *coarse-grained* +
Service provides rather large operations (save entire entity or set of entities rather than individual attributes)
* *atomic* +
Process individual entities (for processing large sets of data use a link:guide-batch-layer[batch] instead of a service)
* *simplicity* +
avoid polymorphism, RPC methods with unique name per signature and no overloading, avoid attachments (consider separate download service), etc.

== Security

Your services are the major entry point to your application. Hence security considerations are important here.

=== CSRF

A common security threat is https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)[CSRF] for REST services. Therefore all REST operations that are performing modifications (PUT, POST, DELETE, etc. - all except GET) have to be secured against CSRF attacks. In OASP4J we are using spring-security that already solves CSRF token generation and verification. The integration is part of the application template as well as the sample-application.

For testing in development environment the CSRF protection can be disabled using the JVM option +-DCsrfDisabled=true+ when starting the application.
